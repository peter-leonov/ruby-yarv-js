#!/usr/bin/env ruby-1.9

require 'yaml'
require 'optparse'

class Block
  
  @@space = "  "
  
  @@out_space = '	'
  
  @@js_id_rex = /^[a-zA-Z]\w*$/
  
  @@deep_size = 0
  
  
  def initialize
    @code = ""
    @s = []
    @locals = []
  end
  
  def warn_op op, str = ""
    warn "#{@@space * (@@deep_size + 2)}#{op.first(5).select{|v|v.class!=Array}}#{str}, [#{@s.map{|v|v.to_s[0, 20]}}]"
  end
  
  def warn_str str
    warn "#{@@space * (@@deep_size + 2)}#{str}"
  end
  
  def out_space
    @@out_space * @@deep_size
  end
  
  def to_local num
    "$#{@@deep_size}_#{num}"
  end
  
  def to_special num
    ["!!!", "Class", "self"][num]
  end
  
  def op_trace op
    @s = []
  end
  
  def draw_stack
    @s.empty? ? "" : @s.join(', ') + ";"
  end
  
  
  def op_putself op
    @s << "self"
  end
  
  def op_putnil op
    @s << "null"
  end
  
  def op_putstring op
    @s << "#{op[1].inspect}"
  end
  
  def op_putobject op
    val = op[1]
    @s << (val.class == Symbol || val.class == String ? val.to_s.inspect : val)
  end
  
  def op_putiseq op
    iseq = op[1]
    
    @s << bakeclosure(iseq)
  end
  
  def op_putspecialobject op
    @s << "#{to_special op[1]}"
  end
  
  def op_setlocal op
    @locals << to_local(op[1])
    last = @s.pop
    @s << "#{to_local op[1]} = #{last}"
  end
  
  def op_setdynamic op
    last = @s.pop
    @s << "$#{@@deep_size - op[2]}_#{op[1]} = #{last}"
  end
  
  def op_setconstant op
    special = @s.pop
    last = @s.pop
    # @locals << op[1]
    # @s << "#{op[1]} = #{special}.#{op[1]} = #{last}"
    @s << "#{special}.#{op[1]} = #{last}"
  end
  
  def op_setinlinecache op
  end
  
  
  
  def op_getlocal op
    @s << "#{to_local op[1]}"
  end
  
  def op_getdynamic op
    @s << "$#{op[1]}_#{op[2]}" # dynamic
  end
  
  def op_getconstant op
    last = @s.pop
    if last && last != "null"
      @s << "#{last}.#{op[1]}"
    else
      @s << "#{op[1]}"
    end
  end
  
  def op_tostring op
    last = @s.pop
    @s << "String(#{last})"
  end
  
  def op_getinlinecache op
  end
  
  def op_dup op
  end
  
  def op_concatstrings op
    args = @s.last(op[1])
    op[1].times { @s.pop }
    
    @s << args.join(" + ")
  end
  
  def op_opt_plus op
    last = @s.pop
    prev = @s.pop
    # (...) may be needed
    @s << "#{prev} + #{last}"
  end
  
  def op_opt_minus op
    last = @s.pop
    prev = @s.pop
    # (...) may be needed
    @s << "#{prev} - #{last}"
  end
  
  def op_opt_div op
    last = @s.pop
    prev = @s.pop
    # (...) may be needed
    @s << "#{prev} / #{last}"
  end
  
  def op_opt_mult op
    last = @s.pop
    prev = @s.pop
    # (...) may be needed
    @s << "#{prev} * #{last}"
  end
  
  def op_opt_length op
    last = @s.pop
    @s << "#{last}.length"
  end
  
  
  def op_send op
    name = op[1].to_s
    args_len = op[2]
    args = @s.last(args_len)
    args_len.times { @s.pop }
    this = @s.pop
    
    block = op[3]
    if block
      code = bakeclosure op[3]
      args.unshift code
    end
    
    if this && this != "null"
      unless this =~ @@js_id_rex
        this = "(#{this})"
      end
      if name !~ @@js_id_rex
        name = "[#{name.to_s.inspect}]"
      elsif name != "new"
        name = ".#{name}"
      end
      
      call = name == "new" ? "new #{this}" : "#{this}#{name}"
    else
      unless name =~ @@js_id_rex
        name = "global[#{name.to_s.inspect}]"
      end
      
      call = "#{name}"
    end
    
    @s << "#{call}(#{args.join(", ")})"
  end
  
  def op_invokesuper op
    args_len = op[1]
    args = @s.last(args_len)
    args_len.times { @s.pop }
    this = @s.pop
    @s << "this.super(arguments.callee, [#{args.join(", ")}])"
  end
  
  def op_defineclass op
    # SimpleDataFormat
    iseq = op[2]
    block = iseq[11]
    # puts code.to_yaml
    code = Block.new.walk block
    parent = @s.pop
    special = @s.pop
    @code << out_space + "self.#{op[1].to_s} = Class.create(#{op[1].to_s.inspect}, #{parent}, #{special}); new function (self) { with (self) { #{code} } } (#{op[1].to_s});"
  end
  
  def bakeclosure iseq
    # SimpleDataFormat
    args = iseq[4]
    block = iseq[11]
    call = ""
    # p args
    Block.new.walk block do |code|
      call = "function (#{(args[:local_size]-1...args[:arg_size]+args[:local_size]-1).to_a.reverse.map{|v| to_local v}.join(', ')}) {#{code}}"
    end
    return call
    # return "function (#{args}) {#{code}}"
  end
  
  def op_pop op
    @code << out_space + @s.pop.to_s unless @s.empty?
  end
  
  def op_leave op
    @code << out_space + draw_stack
  end
  
  def op_newline op
    @code << out_space + draw_stack + "\n"
    @s = []
  end
  
  
  
  def walk ops
    # warn_str "block"
    @@deep_size += 1
    ops.each do |op|
      if op.class == Fixnum
        warn_op [:newline, op]
        op_newline op
      elsif op.class == Symbol
        warn_op [:label, op]
      else
        optype = ("op_" + op[0].to_s).to_sym
        
        # p op
        if respond_to? optype
          warn_op op
          send optype, op
        else
          warn_op op, " UNKNOWN"
          # warn "unknow optype #{optype}"
        end
      end
    end
    # warn_str "#{@code}"
    locals = @locals.empty? ? "" : "var #{@locals.uniq.join(', ')};"
    code = locals + "\n" + @code.to_s + "\n"
    yield code if block_given?
    @@deep_size -= 1
    return code
  end
end

class Generator
  def start iseq
    # return "(function (self) { self.prototype = {};\n" + Block.new.walk(iseq.to_a.last) + " return self }) (this) ;"
    return Block.new.walk(iseq.to_a.last).to_s
  end
end




OutputCompileOption =
{
  :peephole_optimization    =>false,
  :inline_const_cache       =>false,
  :specialized_instruction  =>true,
  :operands_unification     =>true,
  :instructions_unification =>true,
  :stack_caching            =>false,
}

params = ARGV.getopts("wr")

iseq = RubyVM::InstructionSequence.compile(IO.read(ARGV[0]), "src", 1, OutputCompileOption)#, OutputCompileOption

# puts iseq.to_a.to_yaml


if params["w"]
  g = Generator.new
  unless params["c"]
    class Block; def warn_str *a; end; end
  end
  res = g.start iseq
  if params["r"]
    warn "\n\n\n#{res}"
  end
else
  class Block; def warn_str *a; end; def warn_op *a; end; end
  puts %Q{load("lib.js");} + Generator.new.start(iseq)
end

