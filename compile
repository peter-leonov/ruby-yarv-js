#!/usr/bin/env ruby-1.9

require 'yaml'
require 'optparse'

class Block
  
  @@space = "  "
  @@out_space = '	'
  @@js_id_rex = /^[a-zA-Z]\w*$/
  @@deep_size = 0
  @@echo_off = {:trace => true, :newline => true}
  
  def initialize
    @code = ""
    @s = []
    @locals = []
    @ops = nil
    @pos = 0
    @control = []
  end
  
  def history off
    @ops[@pos+off]
  end
  
  def warn_op op, str = ""
    unless @@echo_off[op[0]]
      warn "#{@@space * (@@deep_size + 2)}#{op.first(5).select{|v|v.class!=Array}}#{str}, [#{@s.map{|v|v.to_s[0, 20]}}]"
    end
  end
  
  def warn_str str
    warn "#{@@space * (@@deep_size + 2)}#{str}"
  end
  
  def out_space
    @@out_space * @@deep_size
  end
  
  def to_local num
    "$#{@@deep_size}_#{num}"
  end
  
  def to_special num
    ["!!!", "Class", "self"][num]
  end
  
  def op_trace op
    # @s = []
  end
  
  def draw_stack
    @s.empty? ? "" : @s.join(', ')
  end
  
  def flush_stack
    res = @s.empty? ? "" : @s.join(', ')
    @s = []
    return res
  end
  
  def op_branchunless op
    @control << "{?#{op[1].to_s.sub(/label_/, "")}}"
    @s = ["(#{flush_stack})"]
  end
  
  def op_jump op
    @control << ["{>#{op[1].to_s.sub(/label_/, "")}}"]
  end
  
  def op_label op
    @control << ["{:#{op[1].to_s.sub(/label_/, "")}}"]
  end
  
  
  def op_putself op
    @s << "self"
  end
  
  def op_putnil op
    @s << "null"
  end
  
  def op_putstring op
    @s << "#{op[1].inspect}"
  end
  
  def op_putobject op
    val = op[1]
    @s << (val.class == Symbol || val.class == String ? val.to_s.inspect : val)
  end
  
  def op_putiseq op
    iseq = op[1]
    
    @s << bakeclosure(iseq)
  end
  
  def op_putspecialobject op
    @s << "#{to_special op[1]}"
  end
  
  def op_setlocal op
    @locals << to_local(op[1])
    last = flush_stack
    @s << "#{to_local op[1]} = #{last}"
  end
  
  def op_setdynamic op
    last = flush_stack
    @s << "$#{@@deep_size - op[2]}_#{op[1]} = #{last}"
  end
  
  def op_setconstant op
    special = @s.pop
    last = flush_stack
    # @locals << op[1]
    # @s << "#{op[1]} = #{special}.#{op[1]} = #{last}"
    @s << "#{special}.#{op[1]} = #{last}"
  end
  
  def op_setinlinecache op
  end
  
  
  
  def op_getglobal op
    name = op[1].to_s.gsub(/^@/, "")
    if name.match @@js_id_rex
      @s << "global.#{name}"
    else
      @s << "global[#{name.to_s.inspect}]"
    end
  end
  
  def op_getlocal op
    @s << "#{to_local op[1]}"
  end
  
  def op_getinstancevariable op
    name = op[1].to_s.gsub(/^@/, "")
    if name.match @@js_id_rex
      @s << "this.#{name}"
    else
      @s << "this[#{name.to_s.inspect}]"
    end
  end
  
  def op_getdynamic op
    @s << "$#{@@deep_size - op[2]}_#{op[1]}" # dynamic
  end
  
  def op_getconstant op
    last = @s.pop
    if last && last != "null"
      @s << "#{last}.#{op[1]}"
    else
      @s << "#{op[1]}"
    end
  end
  
  def op_tostring op
    last = @s.pop
    @s << "String(#{last})"
  end
  
  def op_getinlinecache op
  end
  
  def op_dup op
  end
  
  def op_concatstrings op
    args = @s.last(op[1])
    op[1].times { @s.pop }
    
    @s << args.join(" + ")
  end
  
  def op_opt_aref op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev}[#{last}]"
  end
  
  
  def op_opt_tild op
    last = @s.pop
    @s << "~(#{last})"
  end
  
  def op_opt_plus_uno op
    last = @s.pop
    @s << "+(#{last})"
  end
  
  def op_opt_minus_uno op
    last = @s.pop
    @s << "-(#{last})"
  end
  
  def op_opt_not op
    last = @s.pop
    @s << "!(#{last})"
  end
  
  def op_opt_and op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} & #{last}"
  end
  
  def op_opt_xor op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} ^ #{last}"
  end
  
  def op_opt_or op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} | #{last}"
  end
  
  def op_opt_ltlt op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} << #{last}"
  end
  
  def op_opt_gtgt op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} >> #{last}"
  end
  
  def op_opt_lt op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} < #{last}"
  end
  
  def op_opt_le op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} <= #{last}"
  end
  
  def op_opt_eq op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} == #{last}"
  end
  
  def op_opt_neq op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} != #{last}"
  end
  
  def op_opt_ge op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} >= #{last}"
  end
  
  def op_opt_gt op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} > #{last}"
  end
  
  def op_opt_plus op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} + #{last}"
  end
  
  def op_opt_minus op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} - #{last}"
  end
  
  def op_opt_div op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} / #{last}"
  end
  
  def op_opt_mult op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} * #{last}"
  end
  
  def op_opt_mod op
    last = @s.pop
    prev = @s.pop
    @s << "#{prev} % #{last}"
  end
  
  def op_opt_length op
    last = @s.pop
    @s << "#{last}.length"
  end
  
  
  def op_send op
    name = op[1].to_s
    
    if name == ">>"
      return op_opt_gtgt op
    elsif name == "&"
      return op_opt_and op
    elsif name == "|"
      return op_opt_or op
    elsif name == "^"
      return op_opt_xor op
    elsif name == "-@"
      return op_opt_minus_uno op
    elsif name == "+@"
      return op_opt_plus_uno op
    elsif name == "~"
      return op_opt_tild op
    end
    
    if name == "`"
      name = "system"
    end
    
    args_len = op[2]
    args = @s.last(args_len)
    args_len.times { @s.pop }
    this = @s.pop
    
    block = op[3]
    if block
      code = bakeclosure op[3]
      args.unshift code
    end
    
    if this && this != "null"
      unless this =~ @@js_id_rex
        this = "(#{this})"
      end
      if name !~ @@js_id_rex
        name = "[#{name.to_s.inspect}]"
      elsif name != "new"
        name = ".#{name}"
      end
      
      call = name == "new" ? "new #{this}" : "#{this}#{name}"
    else
      unless name =~ @@js_id_rex
        name = "global[#{name.to_s.inspect}]"
      end
      
      call = "#{name}"
    end
    
    @s << "#{call}(#{args.join(", ")})"
  end
  
  def op_invokesuper op
    args_len = op[1]
    args = @s.last(args_len)
    args_len.times { @s.pop }
    this = @s.pop
    @s << "this.super(arguments.callee, [#{args.join(", ")}])"
  end
  
  def op_defineclass op
    # p op
    # SimpleDataFormat
    iseq = op[2]
    # puts code.to_yaml
    code = Block.new.walk iseq
    parent = @s.pop
    special = @s.pop
    @code << out_space + "self.#{op[1].to_s} = Class.create(#{op[1].to_s.inspect}, #{parent}, #{special}); new function (self) { with (self) { (#{code}) () } } (#{op[1].to_s});"
  end
  
  def bakeclosure iseq
    # SimpleDataFormat
    args = iseq[4]
    block = iseq[11]
    call = ""
    # p args
    return Block.new.walk iseq
    # return "function (#{args}) {#{code}}"
  end
  
  def op_pop op
    @code << out_space + @s.pop.to_s unless @s.empty?
  end
  
  def op_leave op
    @code << out_space + flush_stack + ";"
  end
  
  def op_newline op
    @code << out_space + flush_stack + ";\n"
  end
  
  
  def guess_control
    puts "\n\n\n---"
    str = " " + @control.join(' ') + " "
    
    puts str
    
    found = true
    while found
      found = false
      str = str.gsub(/\{\?(\d+)\} \{\>(\d+)\} \{:\2\} \{>(\d+)\} \{:\1\} \{:\3\} /) do |m|
        found = true
        puts "#{$1} ? #{$2} : #{$3}"
        
      end
      # puts "  #{str}"
    end
    
    puts "---"
  end
  
  
  def walk iseq
    @@deep_size += 1
    @ops = iseq.last
    @ops.each do |op|
      if op.class == Symbol
        op = [:label, op]
      end
      
      if op.class == Fixnum
        warn_op [:newline, op]
        op_newline op
      else
        optype = ("op_" + op[0].to_s).to_sym
        
        if respond_to? optype
          warn_op op
          send optype, op
        else
          warn_op op, " UNKNOWN"
        end
      end
      @pos += 1
    end
    
    guess_control
    
    locals = @locals.empty? ? "" : "var #{@locals.uniq.join(', ')};"
    code = locals + "\n" + @code.to_s + "\n"
    
    args = iseq[4]
    code = "function (#{(args[:local_size]-1...args[:arg_size]+args[:local_size]-1).to_a.reverse.map{|v| to_local v}.join(', ')}) {#{code}}"
    
    @@deep_size -= 1
    return code
  end
end

class Generator
  def start iseq
    # return "(function (self) { self.prototype = {};\n" + Block.new.walk(iseq.to_a.last) + " return self }) (this) ;"
    return "(" + Block.new.walk(iseq.to_a).to_s + ") ()"
  end
end




OutputCompileOption =
{
  :peephole_optimization    =>false,
  :inline_const_cache       =>false,
  :specialized_instruction  =>true,
  :operands_unification     =>true,
  :instructions_unification =>true,
  :stack_caching            =>false,
}

params = ARGV.getopts("wr")

iseq = RubyVM::InstructionSequence.compile(IO.read(ARGV[0]), "src", 1, OutputCompileOption)#, OutputCompileOption

# puts iseq.to_a.to_yaml


if params["w"]
  g = Generator.new
  unless params["c"]
    class Block; def warn_str *a; end; end
  end
  res = g.start iseq
  if params["r"]
    warn "\n\n\n#{res}"
  end
else
  class Block; def warn_str *a; end; def warn_op *a; end; end
  puts %Q{load("lib.js");} + Generator.new.start(iseq)
end

